<script type="text/jsx">
  window.onload = function (e) {
    // Remove blur
    var mapWrapper = document.getElementsByClassName('world-map');
    mapWrapper[0].className = 'world-map';

    // Request places
    var geocoded = {};
    $.ajax({
      url: '/foursquare/places',
      dataType: 'json',
      success: function (places) {
        // TODO Remove this
        places = places.cities || places.items || places;

        var markers = $.map(places, function (info, name) {
          return new google.maps.Marker({
            icon: 'images/icons/marker_01.png',
            position: new google.maps.LatLng(info.lat, info.lng)/*,
            map: map*/
          });
        });

        var clusterStyles = [
          {
            textColor: 'white',
            textSize: 13,
            url: 'images/icons/marker_02.png',
            height: 51,
            width: 51
          },
          {
            textColor: 'white',
            textSize: 13,
            url: 'images/icons/marker_03.png',
            height: 81,
            width: 81
          },
          {
            textColor: 'white',
            textSize: 13,
            url: 'images/icons/marker_04.png',
            height: 131,
            width: 131
          }
        ];
        var mcOptions = {
            styles: clusterStyles,
            gridSize: 50
        };

        mc = new MarkerClusterer(map, markers, mcOptions);
        mc.fitMapToMarkers();
      },
      error: console.log
    });

    function placeMarker(latandlong) {
      return new google.maps.Marker({
          //map: map,
          position: latandlong
      });
    }

    function codeAddress(address) {
      if (!geocoded[address]) {
        geocoder.geocode({
          'address': address
        }, function (results, status) {
          if (status == google.maps.GeocoderStatus.OK) {
            geocoded[address] = results[0].geometry.location;
            placeMarker(geocoded[address]);
          } else {
            alert('Geocode was not successful for the following reason: ' + status);
          }
        });
      } else {
        placeMarker(geocoded[address]);
      }
    }
  };


  /**
   *  ___       ___         ___      ___ ___
   *  `MMb     dMM'68b      `MM      `MM `MM
   *   MMM.   ,PMM Y89       MM       MM  MM
   *   M`Mb   d'MM ___   ____MM   ____MM  MM   ____
   *   M YM. ,P MM `MM  6MMMMMM  6MMMMMM  MM  6MMMMb
   *   M `Mb d' MM  MM 6M'  `MM 6M'  `MM  MM 6M'  `Mb
   *   M  YM.P  MM  MM MM    MM MM    MM  MM MM    MM
   *   M  `Mb'  MM  MM MM    MM MM    MM  MM MMMMMMMM
   *   M   YP   MM  MM MM    MM MM    MM  MM MM
   *   M   `'   MM  MM YM.  ,MM YM.  ,MM  MM YM    d9
   *  _M_      _MM__MM_ YMMMMMM_ YMMMMMM__MM_ YMMMM9
   */

  var headerClass = 'alpha-header';

  var ClusterToggle = React.createClass({
    getInitialState: function () {
      return {
        isSelected: true
      };
    },
    handleClick: function () {
      var state = this.state.isSelected;

      this.setState({
        isSelected: !state
      });

      mc.setOptions({map: state ? null : map});
    },
    render: function () {
      var classString = headerClass + '--toggle';

      return (
        <div className={classString}>
          <span>Cluster</span>
          <input type="checkbox" onClick={this.handleClick} checked={this.state.isSelected} />
          <span>Singles</span>
        </div>
      );
    }
  });

  React.render(
    <ClusterToggle />,
    document.getElementById('header-wrapper-center')
  );


/**
 * ________
 * `MMMMMMMb.
 *  MM    `Mb             /       /
 *  MM     MM   _____    /M      /M       _____   ___  __    __
 *  MM    .M9  6MMMMMb  /MMMMM  /MMMMM   6MMMMMb  `MM 6MMb  6MMb
 *  MMMMMMM(  6M'   `Mb  MM      MM     6M'   `Mb  MM69 `MM69 `Mb
 *  MM    `Mb MM     MM  MM      MM     MM     MM  MM'   MM'   MM
 *  MM     MM MM     MM  MM      MM     MM     MM  MM    MM    MM
 *  MM     MM MM     MM  MM      MM     MM     MM  MM    MM    MM
 *  MM    .M9 YM.   ,M9  YM.  ,  YM.  , YM.   ,M9  MM    MM    MM
 * _MMMMMMM9'  YMMMMM9    YMMM9   YMMM9  YMMMMM9  _MM_  _MM_  _MM_
 */

  var Avatar = React.createClass({
    render: function () {
      var classString = headerClass + '--avatar';

      return (
        <div className={classString}>
          <span>{this.props.msg}</span>
          <img src={this.props.src}/>
        </div>
      );
    }
  });

  var Menu = React.createClass({
    getInitialState: function () {
      return {
        isOpen: false
      };
    },
    handleClick: function () {
      var isOpen = this.state.isOpen;

      this.setState({
        isOpen: !isOpen
      });

      $('#world-map-canvas').css('left', isOpen ? '-100px' : '0');
    },
    render: function () {
      var classString = headerClass + '--menu';

      return (
        <div className={classString} onClick={this.handleClick}>
        </div>
      );
    }
  });

  var Account = React.createClass({
    getInitialState: function() {
      return {
        msg: 'Loading...',
        src: ''
      };
    },
    componentDidMount: function () {
      var size = '100x100'
      $.getJSON(this.props.endpoint, function (user) {
        user = user.user || user;

        if (this.isMounted()) {
          var msg = 'Welcome, ' + user.firstName + '!';
          var src = user.photo.prefix + size + user.photo.suffix
          this.setState({
            msg: msg,
            src: src
          });
        }
      }.bind(this));
    },
    render: function () {
      var classString = headerClass + '--account';

      return (
        <div className={classString}>
          <Avatar msg={this.state.msg} src={this.state.src} />
          <Menu />
        </div>
      );
    }
  });

  React.render(
    <Account endpoint="/foursquare/user" />,
    document.getElementById('header-wrapper-right')
  );
</script>

<header id="alpha-header" class="alpha-header">
  <div id="header-wrapper-left" class="alpha-header--left"></div>
  <div id="header-wrapper-center" class="alpha-header--center"></div>
  <div id="header-wrapper-right" class="alpha-header--right"></div>
</header>
